--CREATE DATABASE
DROP TABLE IF EXISTS ONLINEBOOKSTORE;
CREATE DATABASE ONLINEBOOKSTORE;

 --CREATE TABLES
 DROP TABLE IF EXISTS BOOKS CASCADE;
 CREATE TABLE BOOKS(
BOOK_ID SERIAL PRIMARY KEY,
TITLE VARCHAR (100),
AUTHOR VARCHAR (100),
GENRE VARCHAR(50),
PUBLISHED_YEAR INT,
PRICE NUMERIC(10,2),
STOCK INT
 );

 DROP TABLE IF EXISTS CUSTOMERS CASCADE;
 CREATE TABLE CUSTOMERS(
CUSTOMER_ID SERIAL PRIMARY KEY,
NAME VARCHAR (100),
EMAIL VARCHAR (100),
PHONE VARCHAR (15),
CITY VARCHAR (100),
COUNTRY VARCHAR (100)
 );

 DROP TABLE IF EXISTS ORDERS;
 CREATE TABLE ORDERS(
ORDER_ID SERIAL PRIMARY KEY,
CUSTOMER_ID INT REFERENCES CUSTOMERS(CUSTOMER_ID),
 BOOK_ID INT REFERENCES BOOKS (BOOK_ID),
 ORDER_DATE DATE,
 QUANTITY INT,
 TOTAL_AMOUNT NUMERIC(10,2)
 );

 SELECT*FROM BOOKS;
  SELECT*FROM CUSTOMERS;
   SELECT*FROM ORDERS;

---IMPORT DATA  INTO THE TABLES 
COPY BOOKS (BOOK_ID, TITLE, AUTHOR, GENRE, PUBLISHED_YEAR, PRICE, STOCK)
FROM 'C:\data analyst internship\PostgreSQL\online book store project\Books.csv'
DELIMITER ','
CSV HEADER;



copy CUSTOMERS(CUSTOMER_ID,NAME,EMAIL,PHONE,CITY,COUNTRY)
FROM 'C:\data analyst internship\PostgreSQL\online book store project\Customers.csv'
DELIMITER ','
CSV HEADER;

copy ORDERS(ORDER_ID,CUSTOMER_ID,BOOK_ID,ORDER_DATE,QUANTITY,TOTAL_AMOUNT)
FROM 'C:\data analyst internship\PostgreSQL\online book store project\Orders.csv'
DELIMITER ','
CSV HEADER;

--1)RETRIEVE ALL BOOKS INT HE 'FICTION' GENRE:
SELECT *FROM BOOKS
WHERE GENRE='Fiction';

--2)find all the books published after the year 1950:
select *from books
where published_year>1950;

--3)list all the customers from the canada:
select *from customers
where country='Canada';

--4)show order plces in Novembar 2023
select * from orders
where order_date between '2023-11-01' and '2023-11-30';

--5)RETRIEVE THE TOTAL STOCK OF BOOKS AVAILABLE:
SELECT SUM(STOCK) AS TOTAL_STOCK
FROM BOOKS;

--6)FIND THE DETAILS OF THE MOST EXPENSIVE BOOK:
SELECT *FROM BOOKS 
ORDER BY PRICE DESC LIMIT 1;

--7)SHOW ALL CUSTOMERS WHO ORDERED MORE THAN 1 QUANTITY OF A BOOK:
SELECT *FROM ORDERS
WHERE QUANTITY>1;

--8)RETRIEVE ALL ORDERS WHERE TOTAL AMOUNT EXCEEDS $20:
SELECT *FROM ORDERS
WHERE TOTAL_AMOUNT>20 ORDER BY TOTAL_AMOUNT DESC;

--9)LIST ALL GENRE IN THE BOOKS TABLE:
SELECT DISTINCT GENRE
FROM BOOKS;

--10) FIND THE BOOKS WITH THE LOWEST STOCK:

SELECT * FROM BOOKS ORDER BY STOCK ASC;
SELECT *FROM BOOKS
WHERE STOCK<1;

--11)CALCULATE THE TOTAL REVENUE GENERATED FROM ALL ORDERS:
SELECT SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE
FROM ORDERS;


--ADVANCED QUESTIONS
--1)RETRIEVE THE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENRE:

SELECT *FROM ORDERS;
SELECT B.GENRE,SUM(O.QUANTITY) AS TOTAL_BOOKSOLD-----TOTAL CHAHIYE ISLIYE SUM
FROM ORDERS O
JOIN BOOKS B
ON O.BOOK_ID=B.BOOK_ID
GROUP BY B.GENRE;---KISMESE KRNA HY

--2)FIND THE AVERAGE PRICE OF BOOKS IN THE 'Fantasy' genre:
SELECT AVG(PRICE) AS AVG_PRICE
FROM BOOKS
WHERE GENRE='Fantasy';

--3)LIST CUSTOMER WHO HAVE PLACED AT LEAT 2 ORDERS:
SELECT  C.CUSTOMER_ID, C.NAME, 
COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM CUSTOMERS C
JOIN ORDERS O 
ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.NAME
HAVING COUNT(O.ORDER_ID) >= 2;

--4)FIND THE MOST FREQUENT ORDERED BOOK:
SELECT O.BOOK_ID,B.TITLE,COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
JOIN BOOKS B
ON B.BOOK_ID=O.BOOK_ID
GROUP BY O.BOOK_ID,B.TITLE ORDER BY ORDER_COUNT DESC LIMIT 1;

--5)SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF 'FANTASY':
 SELECT*FROM BOOKS;
 SELECT GENRE,TITLE,price
 FROM BOOKS
 WHERE GENRE='Fantasy' ORDER BY PRICE DESC LIMIT 3;

 --6)RETRIVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR
 SELECT*FROM BOOKS;
 SELECT*FROM ORDERS;
SELECT B.AUTHOR,SUM(O.QUANTITY) AS TOTAL_QUANTITY
 FROM ORDERS O
 JOIN BOOKS B
 ON B.BOOK_ID=O.BOOK_ID
 GROUP BY B.AUTHOR;

 --7)LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER $30 ARE LOCATED:
SELECT*FROM ORDERS; 
SELECT*FROM CUSTOMERS; 
SELECT DISTINCT C.COUNTRY,O.TOTAL_AMOUNT
FROM ORDERS O
JOIN CUSTOMERS C
ON C.CUSTOMER_ID=O.CUSTOMER_ID
WHERE O.TOTAL_AMOUNT>30;

--8)FIND THE CUSTOMERS WHO SPENT THE MOST ON ORDERS:
SELECT C.NAME,C.CUSTOMER_ID,SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT
FROM ORDERS O
JOIN CUSTOMERS C
ON C.CUSTOMER_ID=O.CUSTOMER_ID
GROUP BY C.NAME,C.CUSTOMER_ID ORDER BY TOTAL_SPENT  DESC;

--9)CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS:
SELECT*FROM ORDERS; 
SELECT*FROM BOOKS;
SELECT B.BOOK_ID,B.TITLE,B.STOCK,COALESCE (SUM(O.QUANTITY),0 )AS TOTAL_ORDER,
B.STOCK-COALESCE (SUM(O.QUANTITY),0 ) AS REMAINING_QUANTITY
FROM BOOKS B
LEFT JOIN ORDERS O
ON O.BOOK_ID=B.BOOK_ID
GROUP BY B.BOOK_ID ORDER BY B.BOOK_ID;

